@page "/participant"
@using mssqlProject.Models;
@using IgniteUI.Blazor.Controls
@inject HttpClient Http

<PageTitle>Uczesnik</PageTitle>

<h1>Uczesnik</h1>
<p>Strona do przeglądania, sortowania, filtorwania istniejących uczestników.</p>


@if (m_Data == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="float: right; margin-right: 150px;" class="btn-group" role="group" aria-label="Button group with nested dropdown">
        <div class="btn-group" role="group">
            <button id="btnGroupDrop1" type="button" class="btn btn-secondary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @sortPrompt
            </button>
            <div class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                <a class="dropdown-item" @onclick="() => sortBudgets(1,1)">po Id rosnąco</a>
                <a class="dropdown-item" @onclick="() => sortBudgets(1,0)">po Id malejąco</a>
                <a class="dropdown-item" @onclick="() => sortBudgets(2,1)">po TripId rosnąco</a>
                <a class="dropdown-item" @onclick="() => sortBudgets(2,0)">po TripId malejąco</a>
                <a class="dropdown-item" @onclick="() => sortBudgets(3,1)">po GroupId rosnąco</a>
                <a class="dropdown-item" @onclick="() => sortBudgets(3,0)">po GroupId malejąco</a>
                <a class="dropdown-item" @onclick="() => sortBudgets(4,1)">po Email rosnąco</a>
                <a class="dropdown-item" @onclick="() => sortBudgets(4,0)">po Email malejąco</a>
                <a class="dropdown-item" @onclick="() => sortBudgets(5,1)">po PhoneNumber rosnąco</a>
                <a class="dropdown-item" @onclick="() => sortBudgets(5,0)">po PhoneNumber malejąco</a>
            </div>
        </div>
    </div>

    <div style="width: 500px;">
        <button style="margin-left: 30px;" @onclick="ClearFiltr">Zeruj wsyzstkie filtry i sortowanie</button>
    </div>

    <div style="margin-top:50px; width: 500px;">
        Wyszukuj po:<br>
        <input checked="checked" type="radio" name="radioBtn" value="Id" @onclick="@(() => SetSearchSubject("Id"))" /><label style="margin-left:5px;"> Id</label><br>
        <input type="radio" name="radioBtn" value="TripId" @onclick="@(() => SetSearchSubject("TripId"))" /><label style="margin-left:5px;"> TripId</label><br>
        <input type="radio" name="radioBtn" value="GroupId" @onclick="@(() => SetSearchSubject("GroupId"))" /><label style="margin-left:5px;"> GroupId</label><br>
        <input type="radio" name="radioBtn" value="Email" @onclick="@(() => SetSearchSubject("Email"))" /><label style="margin-left:5px;"> Email</label><br>
        <input type="radio" name="radioBtn" value="PhoneNumber" @onclick="@(() => SetSearchSubject("PhoneNumber"))" /><label style="margin-left:5px;"> PhoneNumber</label><br>

        Wyszukiwana fraza: <input style="width:300px;" type="text" @bind="@searchInputContent" @oninput="@((EventArgs) => Filter(EventArgs.Value.ToString()))" />
    </div>


    <br />
    <br />
    <br />
    <br />
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>TripId</th>
                <th>GroupId</th>
                <th>Email</th>
                <th>PhoneNumber</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in m_Data)
            {
                <tr>
                    <td>@data.Id</td>
                    <td>@data.TripId</td>
                    <td>@data.GroupId</td>
                    <td>@data.Email</td>
                    <td>@data.PhoneNumber</td>
                </tr>
            }
        </tbody>
    </table>
}
<br />
<br />
<br />
<br />
<br />
<br />

@code {
    private List<Participant>? m_Data;
    private List<Participant>? m_DataReference;
    private List<Participant>? m_DataReferenceCopy;

    private string sortPrompt = "Sortowanie";
    private string searchSubject { get; set; } = "Id";
    private string searchWord { get; set; } = "";
    private string searchInputContent { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
        m_DataReferenceCopy = await Http.GetFromJsonAsync<List<Participant>>("https://localhost:44304/api/Participant");
        m_DataReference = new List<Participant>(m_DataReferenceCopy);
        m_Data = new List<Participant>(m_DataReferenceCopy);
    }


    private void SetSearchSubject(string val) => searchSubject = val;


    private void ClearFiltr()
    {
        //zerowanie filtrow, sortowania i wyszukiwania
        m_DataReference = new List<Participant>(m_DataReferenceCopy);
        m_Data = new List<Participant>(m_DataReferenceCopy);

        sortPrompt = "Sortowanie";
        searchSubject = "Id";
        searchWord = "";
        searchInputContent = "";
    }


    private void Filter(string word)
    {
        if (m_Data == null)
            return;

        //1.Wyczyszczenie wyswietlanych danych
        m_Data.Clear();

        //2.Sprawdzenie czy konieczne jest pracowanie na ogrignalnym zbiorze
        if (searchWord.Length > word.Length)
        {
            m_DataReference = new List<Participant>(m_DataReferenceCopy);
        }

        //3.W celu dzialania punktu 2 filtrowania trzeba zapisywac poprzednie wartosci
        //  aby mozna bylo stwierdzic czy zakres filtrow nie zwiekszyl sie
        searchWord = word;

        //4.Filtracja wstepna na podstawie zaznaczonych argumentow zakresu
        m_Data = m_DataReference;
        // brak filtowania po wlascicowasciach

        //5.Filtracja zawierania, dopasuj dane do searchWord jesli jest ono ustawione
        if (!string.IsNullOrEmpty(searchWord))
            Search(searchWord);

        //6.Zapis aktualnego modelu jako model referencyjny
        m_DataReference = new List<Participant>(m_Data);
    }


    private void Search(string word)
    {
        List<Participant> tmp = new List<Participant>();
        switch (searchSubject)
        {
            case "Id":
                foreach (var el in m_Data)
                {
                    if (el.Id.ToString().Contains(word))
                        tmp.Add(el);
                }
                break;
            case "TripId":
                foreach (var el in m_Data)
                {
                    if (el.TripId.ToString().Contains(word))
                        tmp.Add(el);
                }
                break;
            case "GroupId":
                foreach (var el in m_Data)
                {
                    if (el.GroupId.ToString().Contains(word))
                        tmp.Add(el);
                }
                break;
            case "Email":
                foreach (var el in m_Data)
                {
                    if (el.Email.Contains(word))
                        tmp.Add(el);
                }
                break;
            case "PhoneNumber":
                foreach (var el in m_Data)
                {
                    if (el.PhoneNumber.Contains(word))
                        tmp.Add(el);
                }
                break;
            default:
                break;
        }
        m_Data = tmp;
    }


    private void sortBudgets(int sortSubject, int order)
    {
        switch (sortSubject)
        {
            case 1:
                if (order == 1)
                {
                    sortPrompt = "po Id rosnąco";
                    m_Data = m_Data.OrderBy(x => x.Id).ToList();
                }
                else
                {
                    sortPrompt = "po Id malejąco";
                    m_Data = m_Data.OrderByDescending(x => x.Id).ToList();
                }
                break;
            case 2:
                if (order == 1)
                {
                    sortPrompt = "po TripId rosnąco";
                    m_Data = m_Data.OrderBy(x => x.TripId).ToList();
                }
                else
                {
                    sortPrompt = "po TripId malejąco";
                    m_Data = m_Data.OrderByDescending(x => x.TripId).ToList();
                }
                break;
            case 3:
                if (order == 1)
                {
                    sortPrompt = "po GroupId rosnąco";
                    m_Data = m_Data.OrderBy(x => x.GroupId).ToList();
                }
                else
                {
                    sortPrompt = "po GroupId malejąco";
                    m_Data = m_Data.OrderByDescending(x => x.GroupId).ToList();
                }
                break;
            case 4:
                if (order == 1)
                {
                    sortPrompt = "po Email rosnąco";
                    m_Data = m_Data.OrderBy(x => x.Email).ToList();
                }
                else
                {
                    sortPrompt = "po Email malejąco";
                    m_Data = m_Data.OrderByDescending(x => x.Email).ToList();
                }
                break;
            case 5:
                if (order == 1)
                {
                    sortPrompt = "po PhoneNumber rosnąco";
                    m_Data = m_Data.OrderBy(x => x.PhoneNumber).ToList();
                }
                else
                {
                    sortPrompt = "po PhoneNumber malejąco";
                    m_Data = m_Data.OrderByDescending(x => x.PhoneNumber).ToList();
                }
                break;
            default:
                sortPrompt = "po Id rosnąco";
                m_Data = m_Data.OrderBy(x => x.Id).ToList();
                break;
        }
    }
}